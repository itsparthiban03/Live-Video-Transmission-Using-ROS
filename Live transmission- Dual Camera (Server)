import socket
import cv2
import numpy as np

# Create a socket object
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Get the local machine name and define the port to listen on
host = socket.gethostname()
port = 12345
# Bind the socket to a specific address and port
server_socket.bind((host, port))

# Listen for incoming connections
server_socket.listen(1)
print('Server listening on {}:{}'.format(host, port))

# Accept a client connection
client_socket, addr = server_socket.accept()
print('Client connected:', addr)

# Create a VideoCapture object for the system camera
cap_system = cv2.VideoCapture(0)

# Create a VideoCapture object for the external camera (assuming it is connected as the second camera)
cap_external = cv2.VideoCapture(1)

# Set the video codec and frame size
fourcc = cv2.VideoWriter_fourcc(*'XVID')
cap_system.set(cv2.CAP_PROP_FOURCC, fourcc)
cap_system.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap_system.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap_external.set(cv2.CAP_PROP_FOURCC, fourcc)
cap_external.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap_external.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
try:
    # Loop to continuously capture and send video frames to the client
    while True:
        # Capture a frame from the system camera
        ret_system, frame_system = cap_system.read()

        # Capture a frame from the external camera
        ret_external, frame_external = cap_external.read()

        # Convert the frames to string representations
        frame_system_str = frame_system.tostring()
        frame_external_str = frame_external.tostring()

        # Send the system camera frame size to the client as a fixed-size 10-character string
        frame_system_size_str = str(len(frame_system_str)).zfill(10)
        try:
            client_socket.send(frame_system_size_str.encode())
        except socket.error as e:
            print("Error sending system camera frame size:", e)
            break

        # Send the system camera frame data to the client
        try:
            client_socket.sendall(frame_system_str)
        except socket.error as e:
            print("Error sending system camera frame data:", e)
            break
        # Send the external camera frame size to the client as a fixed-size 10-character string
        frame_external_size_str = str(len(frame_external_str)).zfill(10)
        try:
            client_socket.send(frame_external_size_str.encode())
        except socket.error as e:
            print("Error sending external camera frame size:", e)
            break

        # Send the external camera frame data to the client
        try:
            client_socket.sendall(frame_external_str)
        except socket.error as e:
            print("Error sending external camera frame data:", e)
            break

        # Break the loop if the 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Server interrupted by user.")
finally:
    # Release the video capture objects and close the client socket
    cap_system.release()
    cap_external.release()
    try:
        client_socket.close()
    except socket.error as e:
        pass

    # Close the server socket
    server_socket.close()
