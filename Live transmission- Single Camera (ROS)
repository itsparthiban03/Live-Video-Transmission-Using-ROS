#!/usr/bin/env python3

import rospy
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

class CameraNode:
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node('camera_server', anonymous=False)
        
        # Create a camera object with OpenCV
        self.camera = cv2.VideoCapture(0)
        

        # Set camera frame width and height as needed
        self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        
        # Initialize CvBridge for image conversion
        self.bridge = CvBridge()
        
        # Create a ROS Image publisher for sending camera frames
        self.image_pub = rospy.Publisher('camera_image', Image, queue_size=10)

    def main_control(self):
        try:
            print("Camera Frames Sending...")
            while not rospy.is_shutdown():
                ret, frame = self.camera.read()
                if ret:
                    # Convert the frame to a ROS Image message
                    ros_image = self.bridge.cv2_to_imgmsg(frame, "bgr8")
                    
                    # Publish the ROS Image message
                    self.image_pub.publish(ros_image)
        finally:
            # Release the camera when the node is shut down
            self.camera.release()

if __name__ == '__main__':
    CN = CameraNode()
    try:
        CN.main_control()
    except rospy.ROSInterruptException:
        pass
