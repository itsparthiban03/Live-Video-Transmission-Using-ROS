#!/usr/bin/env python3
import rospy
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
class CameraNode:
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node('camera_server', anonymous=False)
        # Create camera objects with OpenCV for camera indices 2 and 6
        self.camera1 = cv2.VideoCapture(2)
        self.camera2 = cv2.VideoCapture(6)
        # Check if both cameras are successfully opened
        if not self.camera1.isOpened() or not self.camera2.isOpened():
            rospy.logerr("Error opening cameras")
            exit(1)
        # Set camera frame width and height as needed for both cameras
        self.camera1.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.camera1.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.camera2.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.camera2.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        # Initialize CvBridge for image conversion
        self.bridge = CvBridge()
        # Create a ROS Image publisher for sending composite frames
        self.image_pub = rospy.Publisher('camera_images', Image, queue_size=10)
        # Set a buffer size for storing frames
        self.buffer_size = 5
        # Create frame buffers for both cameras
        self.frame_buffer1 = []
        self.frame_buffer2 = []
    def main_control(self):
        try:
            print("Camera Frames Sending...")
            while not rospy.is_shutdown():
                # Get the current timestamp
                timestamp = rospy.Time.now()
                # Read frames from both cameras
                ret1, frame1 = self.camera1.read()
                ret2, frame2 = self.camera2.read()
                if ret1 and ret2:
                    # Concatenate frames horizontally
                    composite_frame = self.concatenate_frames(frame1, frame2)
                    # Convert the composite frame to a ROS Image message
                    ros_composite_image = self.bridge.cv2_to_imgmsg(composite_frame, "bgr8")
                    ros_composite_image.header.stamp = timestamp
                    # Append the message to the frame buffer
                    self.frame_buffer1.append(ros_composite_image)
                    # If the buffer size is exceeded, remove the oldest message
                    if len(self.frame_buffer1) > self.buffer_size:
                        self.frame_buffer1.pop(0)
                    # Publish the frames in the buffer
                    for i in range(len(self.frame_buffer1)):
                        self.image_pub.publish(self.frame_buffer1[i])
                else:
                    rospy.logerr("Error capturing frames from cameras")
        finally:
            # Release both cameras when the node is shut down
            self.camera1.release()
            self.camera2.release()
    def concatenate_frames(self, frame1, frame2):
        h, w, _ = frame1.shape
        composite_frame = cv2.hconcat([frame1, frame2])
        return composite_frame
if __name__ == '__main__':
    CN = CameraNode()
    try:
        CN.main_control()
    except rospy.ROSInterruptException:
        pass
